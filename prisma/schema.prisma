generator client {
  provider = "prisma-client-js"
}
enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  phoneNumber Int
  Otp         Int?
  profileImg  String?
  isAdmin     Boolean? @default(false)
  address     String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  Cart        Cart[]
  Order       Order[]
}
model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  image         String? // optional image URL or path
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[] @relation("CategoryToSubcategory")
  products      Product[]     @relation("CategoryToProduct")
}
model Subcategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String? // Optional image field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String    @db.ObjectId
  category    Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  products    Product[] @relation("SubcategoryToProduct")
}
// Product
model Product {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  price              Float
  discountPrice      Float?
  discountPercentage Int?
  stock              Int
  images String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Foreign Keys
  categoryId    String @db.ObjectId
  subcategoryId String @db.ObjectId
  brandId       String @db.ObjectId
  averageRating  Float?
  // Relations
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategory Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  brand       Brand       @relation(fields: [brandId], references: [id])
  reviews Review[]
  colors         ProductColor[]
  sizes          ProductSize[]
  specifications ProductSpecification[]
}
model ProductColor {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String // "Volt"
  hexCode String // hex color value, e.g., "#FF5733"
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Rating // Rating is now constrained to ONE, TWO, THREE, FOUR, FIVE
  comment   String?
  images    String[]
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  // Relations
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}
model ProductSize {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}
model ProductSpecification {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String // e.g., "Material"
  value String // e.g., "Cotton"
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
}
model Cart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  items         Json
  totalPrice    Float    @default(0)
  totalQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}
model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  items         Json
  totalPrice    Float
  promoCode     String?
  totalQuantity Int
  status        String?  @default("Pending")
  address       String
  chargeId      String?
  paymentLinkId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model PayPalTransaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @unique
  status       String
  amount       Float
  currency     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PromoCode {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  code                 String   @unique
  description          String?
  discountType         String   // 'percentage' or 'fixed'
  discountValue        Float
  maxDiscountValue     Float?
  minOrderAmount       Float?
  perUserLimit         Int?
  usageLimit           Int?
  usedCount            Int      @default(0)
  startAt              DateTime?
  expiresAt            DateTime?
  isActive             Boolean  @default(true)
  isPublic             Boolean  @default(true)
  appliesToProductIds  String[]
  appliesToCategoryIds String[]
  customerId           String?

  promoCodeUsages      PromoCodeUsage[]

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model PromoCodeUsage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  promoCodeId String   @db.ObjectId
  usedAt      DateTime @default(now())

  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id])
}

model carousel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  brand       String @unique
  logoURL     String
  description   String?
  offer         String?
  image         String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}